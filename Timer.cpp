/*
 * Timer.cpp
 *
 *  Created on: Dic 2017
 *      Author: raulMrello
 *
 */

#include "Timer.h"




//------------------------------------------------------------------------------------
//-- PUBLIC METHODS IMPLEMENTATION ---------------------------------------------------
//------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------
Timer::Timer() {
	_stat = Stopped;
    _last = 0;
    _start = 0;
    Ticker_HAL::start();
}


//------------------------------------------------------------------------------------
Timer::~Timer() {

}


//------------------------------------------------------------------------------------
void Timer::start() {
	_stat = Started;
	reset();
}


//------------------------------------------------------------------------------------
void Timer::stop() {
    _stat = Stopped;
}


//------------------------------------------------------------------------------------
int Timer::read_us() {
	if(_stat == Started){
		_last = Ticker_HAL::getRawCounter();
	}
	uint64_t mulfactor = 1000000;
	return(((_last - _start)* mulfactor)/Ticker_HAL::TimerScale);
}


//------------------------------------------------------------------------------------
float Timer::read() {
    return ((float)read_us() / 1000000);
}


//------------------------------------------------------------------------------------
int Timer::read_ms() {
	return (read_us() / 1000);
}


//------------------------------------------------------------------------------------
void Timer::reset() {
	_start = Ticker_HAL::getRawCounter();
	_last = _start;
}
